
## Icerik

1. OTP Nedir ve Nasil Calisir
2. Telegram Bot Yapisi
3. OTP Olusturma Mantigi
4. OTP Dogrulama Sureci
5. Guvenlik Onlemleri
6. Hata Yonetimi

---

# 1. OTP Nedir ve Nasil Calisir

## 1.1 OTP (One-Time Password) Tanimi

OTP, tek kullanimlik sifre anlamina gelir. SOHBETSON sisteminde:
- 6 haneli rastgele sayi
- 10 dakika gecerlilik suresi
- Maksimum 5 deneme hakki
- Telegram uzerinden gonderilir

## 1.2 Kullanim Alanlari

### Admin Girisi
```
Admin -> "Sifre Iste" -> OTP Telegram'a gonderilir -> Admin kodu girer -> Giris basarili
```

### Musteri Aramasi
```
Musteri -> Isim girer -> "Ara" -> OTP Telegram'a gonderilir -> Admin bilgilendirilir
```

---

# 2. Telegram Bot Yapisi

## 2.1 Bot Konfigurasyonu

### Environment Variables (.env)
```bash
TELEGRAM_BOT_TOKEN=8147965705:AAEcP0TEzq2G8DYW4INCD2wrH_0yki8Fjx0
TELEGRAM_CHAT_ID=5874850928
```

### Bot Token Nedir?
- Telegram BotFather'dan alinir
- Format: `{bot_id}:{auth_token}`
- Ornek: `8147965705:AAEcP0TEzq2G8DYW4INCD2wrH_0yki8Fjx0`

### Chat ID Nedir?
- Mesaj gonderilecek kullanici/grup ID'si
- Pozitif sayi: Kullanici ID
- Negatif sayi: Grup ID
- Ornek: `5874850928`

## 2.2 TelegramManager Sinifi

```python
class TelegramManager:
    """Telegram bot yonetimi"""
    
    @staticmethod
    def validate_config():
        """Telegram yapilandirmasini dogrula"""
        if not TELEGRAM_BOT_TOKEN:
            logger.error("TELEGRAM_BOT_TOKEN bos")
            return False
        
        if len(TELEGRAM_BOT_TOKEN) < 10:
            logger.error("TELEGRAM_BOT_TOKEN cok kisa")
            return False
        
        if not TELEGRAM_CHAT_ID:
            logger.error("TELEGRAM_CHAT_ID bos")
            return False
        
        if not str(TELEGRAM_CHAT_ID).lstrip('-').isdigit():
            logger.error("TELEGRAM_CHAT_ID gecersiz format")
            return False
        
        return True
```

## 2.3 Telegram API Endpoint

```python
# Telegram Bot API URL
url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"

# Request payload
payload = {
    'chat_id': TELEGRAM_CHAT_ID,
    'text': message,
    'parse_mode': 'HTML',
    'disable_web_page_preview': True
}

# HTTP POST request
response = requests.post(url, json=payload, timeout=5)
```

---

# 3. OTP Olusturma Mantigi

## 3.1 OTP Uretimi

### CallManager.generate_otp()
```python
@staticmethod
def generate_otp():
    """Guvenli 6 haneli OTP uret"""
    # secrets modulu kriptografik olarak guvenli
    return f"{secrets.randbelow(900000) + 100000:06d}"
```

### Nasil Calisir?
```python
secrets.randbelow(900000)  # 0 ile 899999 arasi rastgele sayi
+ 100000                   # 100000 ekle (minimum 100000)
= 100000 ile 999999 arasi  # 6 haneli sayi garantisi

:06d                       # 6 basamak, sifir ile doldur
```

### Ornekler
```python
secrets.randbelow(900000) = 0       -> 0 + 100000 = 100000
secrets.randbelow(900000) = 123456  -> 123456 + 100000 = 223456
secrets.randbelow(900000) = 899999  -> 899999 + 100000 = 999999
```

## 3.2 OTP Kayit Yapisi

### CallManager.create_otp()
```python
@staticmethod
def create_otp(call_id, otp_type='customer'):
    """OTP olustur ve kaydet"""
    otp = CallManager.generate_otp()
    
    with data_lock:
        otp_codes[call_id] = {
            'code': otp,                                    # "123456"
            'expires': datetime.now() + timedelta(minutes=10),  # 10 dk sonra
            'attempts': 0,                                  # Deneme sayisi
            'type': otp_type,                              # admin/customer
            'created_at': datetime.now()                   # Olusturulma zamani
        }
        
        # Yedekleme (opsiyonel)
        try:
            backup_data = {
                cid: {
                    'code': data['code'],
                    'expires': data['expires'].isoformat(),
                    'type': data['type']
                } for cid, data in otp_codes.items()
            }
            with open('otp_backup.json', 'w') as f:
                json.dump(backup_data, f)
        except Exception as e:
            logger.error(f"OTP backup failed: {e}")
    
    return otp
```

### otp_codes Veri Yapisi
```python
otp_codes = {
    'call_id_abc123': {
        'code': '123456',
        'expires': datetime(2025, 1, 22, 14, 40, 0),  # 10 dk sonra
        'attempts': 0,
        'type': 'admin',
        'created_at': datetime(2025, 1, 22, 14, 30, 0)
    },
    'call_id_xyz789': {
        'code': '789012',
        'expires': datetime(2025, 1, 22, 14, 45, 0),
        'attempts': 2,
        'type': 'customer',
        'created_at': datetime(2025, 1, 22, 14, 35, 0)
    }
}
```

---

# 4. Telegram Mesaj Gonderme

## 4.1 TelegramManager.send_message()

```python
@staticmethod
def send_message(message, max_retries=3):
    """Telegram mesaji gonder (retry mekanizmasi ile)"""
    
    # 1. YAPILANDIRMA KONTROLU
    if not TelegramManager.validate_config():
        logger.error("Telegram config invalid")
        return False
    
    # 2. RETRY DONGUSU
    for attempt in range(max_retries):
        try:
            url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
            
            # 3. HTTP POST REQUEST
            response = requests.post(
                url,
                json={
                    'chat_id': TELEGRAM_CHAT_ID,
                    'text': message,
                    'parse_mode': 'HTML',
                    'disable_web_page_preview': True
                },
                timeout=5
            )
            
            # 4. RESPONSE KONTROLU
            if response.status_code == 200 and response.json().get('ok'):
                logger.info("Telegram sent successfully")
                return True
            
            # 5. RATE LIMIT KONTROLU
            elif response.status_code == 429:
                logger.warning("Rate limited by Telegram")
                time.sleep(2)
            
            else:
                logger.error(f"Telegram error: {response.status_code}")
                
        except Exception as e:
            logger.error(f"Telegram send error (attempt {attempt+1}): {e}")
            if attempt < max_retries - 1:
                time.sleep(1)
    
    # 6. FALLBACK: DOSYAYA KAYDET
    logger.error("All Telegram attempts failed, saving to file")
    try:
        with open('telegram_failed.log', 'a', encoding='utf-8') as f:
            f.write(f"{datetime.now()} - {message}\n")
    except Exception as e:
        logger.error(f"Failed to write to telegram_failed.log: {e}")
    
    return False
```

## 4.2 Asenkron Gonderim

```python
@staticmethod
def send_async(message):
    """Telegram mesajini arka planda gonder"""
    def send_in_background():
        try:
            TelegramManager.send_message(message)
        except Exception as e:
            logger.error(f"Background Telegram error: {e}")
    
    # Daemon thread: Ana program kapaninca otomatik kapanir
    thread = threading.Thread(target=send_in_background, daemon=True)
    thread.start()
```

### Neden Asenkron?
```
SENKRON (Yavas):
Kullanici -> Ara butonuna basar
    -> Backend OTP olusturur
    -> Telegram'a gonderir (2-3 saniye bekler)
    -> Response doner
    -> Kullanici 3 saniye bekler ‚ùå

ASENKRON (Hizli):
Kullanici -> Ara butonuna basar
    -> Backend OTP olusturur
    -> Arka planda thread baslatir
    -> Hemen response doner ‚úÖ
    -> Thread Telegram'a gonderir (arka planda)
```

## 4.3 Mesaj Formatlari

### Admin Giris OTP
```python
message = (
    f"üîê <b>Admin Giri≈ü Talebi</b>\n\n"
    f"üïê Saat: {current_time}\n"
    f"üîë OTP: <code>{otp}</code>\n"
    f"üÜî Session ID: <code>{call_id[:8]}...</code>\n\n"
    f"‚ö†Ô∏è Bu kod 10 dakika ge√ßerlidir."
)
```

### Musteri Arama Bildirimi
```python
message = (
    f"üìû <b>{customer_name}</b> arama sayfasƒ±na girdi!\n\n"
    f"üî• <b>Sizi arƒ±yor ve baƒülantƒ± bekliyor!</b>\n"
    f"‚è∞ Giri≈ü Saati: {current_time}\n"
    f"üîê Doƒürulama Kodu: <code>{otp}</code>\n"
    f"üÜî Arama ID: <code>{call_id[:8]}...</code>\n\n"
    f"üë®üíº <a href='{host_url}/admin'>Hemen Admin Paneline Git</a>\n"
    f"‚ö° M√º≈üteriyi bekletmeyin!"
)
```

### HTML Formatlama
```html
<b>Kalin yazi</b>
<i>Italik yazi</i>
<code>Kod blogu</code>
<a href="url">Link</a>
<pre>Onceden formatlanmis</pre>
```

---

# 5. OTP Dogrulama Sureci

## 5.1 Backend Dogrulama

### CallManager.verify_otp()
```python
@staticmethod
def verify_otp(call_id, otp_input):
    """OTP dogrula"""
    with data_lock:
        # 1. OTP KAYDI VAR MI?
        if call_id not in otp_codes:
            return False, 'Gecersiz veya suresi dolmus OTP'
        
        otp_data = otp_codes[call_id]
        
        # 2. SURE KONTROLU (10 dakika)
        if datetime.now() >= otp_data['expires']:
            del otp_codes[call_id]
            return False, 'OTP suresi dolmus'
        
        # 3. DENEME SAYISI KONTROLU (max 5)
        if otp_data.get('attempts', 0) >= MAX_OTP_ATTEMPTS:
            del otp_codes[call_id]
            return False, 'Cok fazla yanlis deneme'
        
        # 4. KOD ESLESMESI
        if otp_data['code'] == otp_input:
            del otp_codes[call_id]
            return True, 'OTP dogrulandi'
        else:
            # Yanlis kod: Deneme sayisini artir
            otp_data['attempts'] += 1
            remaining = MAX_OTP_ATTEMPTS - otp_data['attempts']
            
            if remaining > 0:
                return False, f'Yanlis OTP. {remaining} deneme hakkiniz kaldi'
            else:
                del otp_codes[call_id]
                return False, 'Cok fazla yanlis deneme'
```

## 5.2 API Endpoint

### POST /api/verify-otp
```python
@app.route('/api/verify-otp', methods=['POST'])
@rate_limit_required
@validate_json_required
def verify_otp():
    """OTP dogrulama endpoint"""
    try:
        data = request.get_json()
        
        # 1. OTP VALIDASYONU
        valid, otp_input = SecurityManager.validate_input(
            data, 'otp', 'otp'  # Pattern: 6 haneli sayi
        )
        if not valid:
            return error_response('OTP 6 haneli sayi olmali')
        
        # 2. CALL_ID BULMA
        call_id = data.get('callId')
        
        if not call_id:
            # Call ID yoksa, OTP ile ara
            with data_lock:
                for cid, otp_data in otp_codes.items():
                    if otp_data['code'] == otp_input:
                        call_id = cid
                        break
        
        if not call_id:
            return error_response('Gecersiz OTP')
        
        # 3. OTP DOGRULAMA
        success, message = CallManager.verify_otp(call_id, otp_input)
        
        if success:
            # 4. ADMIN SESSION OLUSTUR
            with data_lock:
                admin_sessions[call_id] = {
                    'authenticated': True,
                    'timestamp': datetime.now(),
                    'ip_address': request.remote_addr
                }
                
                call_info = active_calls.get(call_id, {})
            
            # 5. FLASK SESSION AYARLA (12 saat)
            session.permanent = True
            session['admin_authenticated'] = True
            session['authenticated_at'] = datetime.now().isoformat()
            
            logger.info(f"Admin authenticated for call {call_id[:8]}")
            
            return success_response({
                'callId': call_id,
                'customerName': call_info.get('customer_name', 'Admin Giris')
            }, 'Giris basarili')
        else:
            return error_response(message)
        
    except Exception as e:
        logger.error(f"Error in verify_otp: {e}")
        return error_response('Sistem hatasi', 500)
```

---

# 6. Guvenlik Onlemleri

## 6.1 OTP Guvenlik Katmanlari

### 1. Kriptografik Rastgelelik
```python
import secrets  # Guvenli rastgele sayi uretimi

# YANLIS (Tahmin edilebilir):
import random
otp = random.randint(100000, 999999)  # ‚ùå

# DOGRU (Kriptografik olarak guvenli):
import secrets
otp = secrets.randbelow(900000) + 100000  # ‚úÖ
```

### 2. Zaman Siniri (10 dakika)
```python
expires = datetime.now() + timedelta(minutes=10)

# Dogrulama sirasinda:
if datetime.now() >= otp_data['expires']:
    return False, 'OTP suresi dolmus'
```

### 3. Deneme Siniri (5 deneme)
```python
MAX_OTP_ATTEMPTS = 5

if otp_data['attempts'] >= MAX_OTP_ATTEMPTS:
    del otp_codes[call_id]
    return False, 'Cok fazla yanlis deneme'
```

### 4. Rate Limiting
```python
@rate_limit_required  # 50 istek/dakika
def verify_otp():
    pass
```

### 5. Session Timeout (12 saat)
```python
SESSION_TIMEOUT_HOURS = 12

# Flask session ayari
app.config['PERMANENT_SESSION_LIFETIME'] = timedelta(hours=12)
```

## 6.2 Hassas Veri Gizleme

### Loglarda Hash Kullanimi
```python
@staticmethod
def hash_sensitive_data(data):
    """Hassas veriyi hash'le"""
    return hashlib.sha256(str(data).encode()).hexdigest()[:8]

# Kullanim:
logger.info(f"OTP created: hash={hash_sensitive_data(otp)}")
# Output: "OTP created: hash=a1b2c3d4"
```

---

# 7. Hata Yonetimi

## 7.1 Telegram Hatalari

### 1. Token Hatasi
```python
# Hata: 401 Unauthorized
# Sebep: Yanlis bot token
# Cozum: TELEGRAM_BOT_TOKEN kontrol et
```

### 2. Chat ID Hatasi
```python
# Hata: 400 Bad Request - chat not found
# Sebep: Yanlis chat ID veya bot ile konusma baslatilmamis
# Cozum: 
#   1. Bot ile /start komutu gonder
#   2. TELEGRAM_CHAT_ID kontrol et
```

### 3. Rate Limit
```python
# Hata: 429 Too Many Requests
# Sebep: Cok fazla mesaj gonderildi
# Cozum: Retry mekanizmasi ile bekle

if response.status_code == 429:
    time.sleep(2)  # 2 saniye bekle
    # Tekrar dene
```

### 4. Network Timeout
```python
# Hata: requests.exceptions.Timeout
# Sebep: Internet baglantisi yok veya yavas
# Cozum: Retry mekanizmasi

for attempt in range(max_retries):
    try:
        response = requests.post(url, json=payload, timeout=5)
    except requests.exceptions.Timeout:
        if attempt < max_retries - 1:
            time.sleep(1)
```

## 7.2 OTP Hatalari

### 1. Suresi Dolmus OTP
```python
if datetime.now() >= otp_data['expires']:
    del otp_codes[call_id]
    return False, 'OTP suresi dolmus'
```

### 2. Cok Fazla Deneme
```python
if otp_data['attempts'] >= MAX_OTP_ATTEMPTS:
    del otp_codes[call_id]
    return False, 'Cok fazla yanlis deneme'
```

### 3. Gecersiz Format
```python
# Pattern kontrolu
PATTERNS = {
    'otp': re.compile(r'^\d{6}$')  # Tam 6 haneli sayi
}

if not PATTERNS['otp'].match(otp_input):
    return False, 'OTP 6 haneli sayi olmali'
```

---

# 8. Tam Akis Diyagrami

```
[KULLANICI]
    |
    | 1. "Sifre Iste" butonuna basar
    v
[FRONTEND: admin.js]
    |
    | 2. POST /api/request-admin-otp
    v
[BACKEND: app.py]
    |
    | 3. call_id = generate_secure_token(16)
    | 4. otp = generate_otp()  # "123456"
    | 5. otp_codes[call_id] = {
    |      code: "123456",
    |      expires: now + 10 min,
    |      attempts: 0
    |    }
    v
[TelegramManager]
    |
    | 6. send_async(message)
    |    -> Thread baslatilir
    |    -> POST https://api.telegram.org/bot{token}/sendMessage
    v
[TELEGRAM]
    |
    | 7. Mesaj kullaniciya iletilir
    |    "üîê Admin Giris Talebi"
    |    "üîë OTP: 123456"
    v
[KULLANICI]
    |
    | 8. Telegram'dan OTP'yi okur
    | 9. Admin panelde OTP'yi girer
    v
[FRONTEND: admin.js]
    |
    | 10. POST /api/verify-otp
    |     Body: { otp: "123456" }
    v
[BACKEND: app.py]
    |
    | 11. verify_otp(call_id, "123456")
    |     - Sure kontrolu (10 dk)
    |     - Deneme kontrolu (max 5)
    |     - Kod eslesmesi
    |
    | 12. Basarili ise:
    |     - admin_sessions[call_id] olustur
    |     - session['admin_authenticated'] = True
    |     - del otp_codes[call_id]
    |
    | 13. Response: { success: true }
    v
[FRONTEND: admin.js]
    |
    | 14. showDashboard()
    v
[ADMIN PANEL]
```

---

# 9. Test Senaryolari

## 9.1 Basarili Senaryo
```python
# 1. OTP olustur
otp = "123456"
call_id = "abc123"

# 2. 5 dakika sonra dogrula
time.sleep(300)
success, msg = verify_otp(call_id, "123456")
# Result: (True, "OTP dogrulandi")
```

## 9.2 Suresi Dolmus OTP
```python
# 1. OTP olustur
otp = "123456"
call_id = "abc123"

# 2. 11 dakika sonra dogrula
time.sleep(660)
success, msg = verify_otp(call_id, "123456")
# Result: (False, "OTP suresi dolmus")
```

## 9.3 Yanlis OTP
```python
# 1. OTP olustur (dogru: "123456")
call_id = "abc123"

# 2. Yanlis kod dene
success, msg = verify_otp(call_id, "999999")
# Result: (False, "Yanlis OTP. 4 deneme hakkiniz kaldi")

# 3. 5 kez yanlis dene
for i in range(5):
    verify_otp(call_id, "999999")
# Result: (False, "Cok fazla yanlis deneme")
```

---

# 10. Performans ve Optimizasyon

## 10.1 Asenkron Gonderim
```python
# Senkron: 2-3 saniye bekler
TelegramManager.send_message(message)  # Yavas ‚ùå

# Asenkron: Hemen doner
TelegramManager.send_async(message)  # Hizli ‚úÖ
```

## 10.2 Rate Limiting
```python
# Telegram rate limit: 30 mesaj/saniye
telegram_last_sent = {'last': 0}
TELEGRAM_RATE_LIMIT = 1  # saniye

def check_rate_limit():
    current_time = time.time()
    if current_time - telegram_last_sent['last'] < TELEGRAM_RATE_LIMIT:
        return False
    telegram_last_sent['last'] = current_time
    return True
```

## 10.3 Otomatik Temizlik
```python
# Her 1 saatte bir calisir
def cleanup_expired_data():
    current_time = datetime.now()
    
    with data_lock:
        # Suresi dolmus OTP'leri temizle
        expired_otps = [
            call_id for call_id, otp_data in otp_codes.items()
            if current_time >= otp_data['expires']
        ]
        for call_id in expired_otps:
            del otp_codes[call_id]
```

---

## Ozet

SOHBETSON OTP sistemi:
- ‚úÖ Kriptografik olarak guvenli (secrets modulu)
- ‚úÖ Zaman sinirli (10 dakika)
- ‚úÖ Deneme sinirli (5 deneme)
- ‚úÖ Asenkron gonderim (hizli response)
- ‚úÖ Retry mekanizmasi (3 deneme)
- ‚úÖ Fallback sistemi (dosyaya kayit)
- ‚úÖ Rate limiting (spam onleme)
- ‚úÖ Session yonetimi (12 saat)

**Guvenlik Seviyesi:** Yuksek
**Performans:** Optimize
**Kullanim Kolayligi:** Basit
